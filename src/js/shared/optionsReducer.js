export const OPTIONS_UPDATE = "OPTIONS_UPDATE";

/**
 * Returns the new state of properties after shallow merging a new property-value pair.
 * Each property to be added contains:
 *  - ID of the set it belongs to (setID)
 *  - name of the property to be replaced, or added if a new property (property)
 *  - value of the new/replaced property (value)
 *  - the type of property (type)
 *      + the type is ignored during replacements, for the type should be
 *        consistent during every state.
 *
 * @param {object} state the state of a property
 * @param {object} toAdd an object containing the information
 */
const newProperties = (state = [], toAdd) => {
    if (!toAdd) return state;

    // Try to replace the existing property of the set, if it exists.
    const foundIndex = state.findIndex(
        ({ setID, property }) =>
            setID === toAdd.setID &&
            property === toAdd.property
    );

    if (foundIndex === -1) {
        // A new property is being added, but the type key is omitted,
        // so don't do anything.
        if (!toAdd.type)
            return state;

        return [
            ...state, toAdd
        ];
    }

    // Property is being replaced.

    // Splice array at where there was a match to keep the property in place.
    const newArray = [...state];
    const toBeRemoved = newArray[foundIndex];

    // Replace the type from the old one.
    toAdd.type = toBeRemoved.type;

    newArray.splice(foundIndex, 1, toAdd);

    return newArray;
};

/**
 * A reducer responsible for handling updates to the options.
 * Safe communication between the state of the UI and saved data from storage.
 *
 * @param {object} state the state of the Redux store
 * @param {object} action an action dispatched to the Redux store
 */
const optionsReducer = (state = { properties: [] }, action) => {
    // Return the default state generated by this reducer if action or the type
    // doesn't exist.
    if (!action || !action.type)
        return state;

    switch (action.type) {
        case OPTIONS_UPDATE:
            return {
                ...state,
                properties: newProperties(state.properties, {
                    setID: action.setID,
                    property: action.property,
                    value: action.setAs,
                    type: action.propertyType
                })
            };
        default:
            return state;
    }
};

export default optionsReducer;